#!/usr/bin/env bash

COMMIT_MSG_FILE="$1"

# If the commit message file already contains non-comment lines, do nothing.
if grep -qE '^[^[:space:]#]' "$COMMIT_MSG_FILE"; then
  exit 0
fi

# Gather a list of staged (changed) files.
CHANGED_FILES=$(git diff --cached --name-only)

# Prepare a commented list of changed files.
CHANGED_FILES_COMMENTED=$(echo "$CHANGED_FILES" | sed 's/^/# - /')

# Define the inline message with commit guidelines and changed files.
INLINE_MSG=$(cat <<'EOF'
# ðŸŽ‰Check the rules before writing commit messages.
# https://github.com/sysprog21/lab0-c/blob/master/CONTRIBUTING.md#git-commit-style
#
# Seven Rules for a Great Git Commit Message:
# 1. Separate subject from body with a blank line
# 2. Limit the subject line to 50 characters
# 3. Capitalize the subject line
# 4. Do not end the subject line with a period
# 5. Use the imperative mood in the subject line
# 6. Wrap the body at 72 characters
# 7. Use the body to explain what and why vs. how
#
# You may modify this commit message.
# To abort this commit, exit the editor without saving.
#
# ðŸ”¥Changed files:
EOF
)

# Write an empty line, the guidelines, and the changed files into the commit message.
{
  echo
  echo "$INLINE_MSG"
  # Append the staged files (as comments).
  if [ -n "$CHANGED_FILES" ]; then
    echo "$CHANGED_FILES_COMMENTED"
  else
    echo "# (No staged files detected.)"
  fi
} > "$COMMIT_MSG_FILE"

# Prompt the user about aborting the commit.
read -rp "Do you want to abort this commit? (y/N): " answer
if [[ "$answer" =~ ^[Yy]$ ]]; then
  echo "Commit aborted by user." >&2
  exit 1
fi

exit 0

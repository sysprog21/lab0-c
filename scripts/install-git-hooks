#!/usr/bin/env bash

# Ensure that the common script exists and is readable, then verify it has no
# syntax errors and defines the required function.
common_script="$(dirname "$0")/common.sh"
[ -r "$common_script" ] || { echo "[!] '$common_script' not found or not readable." >&2; exit 1; }
bash -n "$common_script" >/dev/null 2>&1 || { echo "[!] '$common_script' contains syntax errors." >&2; exit 1; }
source "$common_script"
declare -F set_colors >/dev/null 2>&1 || { echo "[!] '$common_script' does not define the required function." >&2; exit 1; }

set_colors

TOTAL_STEPS=5
CURRENT_STEP=0

# 1. Validate the workspace
((CURRENT_STEP++))
progress "$CURRENT_STEP" "$TOTAL_STEPS"

if ! test -d .git; then
  throw "Ensure the git repository is cloned correctly."
fi

workspace=$(git rev-parse --show-toplevel)
if [ ! -d "$workspace" ]; then
  throw "Unable to determine the repository's top-level directory.\n\
This directory $workspace does not appear to be a valid Git repository."
fi

# 2. Check GitHub account
((CURRENT_STEP++))
progress "$CURRENT_STEP" "$TOTAL_STEPS"

ACCOUNT=$(git config --get remote.origin.url | awk -F'[:/]' '{print $(NF-1)}')
REPO_NAME=$(git config --get remote.origin.url | awk -F'[:/]' '{gsub(/\.git$/, "", $NF); print $NF}')

CURL=$(which curl)
if [ $? -ne 0 ]; then
  throw "curl not installed."
fi

CURL_RES=$(${CURL} -s \
-H "Accept: application/vnd.github.v3+json" \
https://api.github.com/repos/${ACCOUNT}/lab0-c/actions/workflows)

TOTAL_COUNT=$(echo ${CURL_RES} | sed -e 's/.*"total_count": \([^,"]*\).*/\1/')
if [[ "$REPO_NAME" != "lab0-c" || "$TOTAL_COUNT" == *"Not Found"* ]]; then
  throw "Check your repository. It should be located at https://github.com/${ACCOUNT}/lab0-c"
fi

# 3. Ensure this repository is frok from sysprog21/lab0-c'.
((CURRENT_STEP++))
progress "$CURRENT_STEP" "$TOTAL_STEPS"

if [[ "${ACCOUNT}" != "sysprog21" ]]; then
  RESPONSE=$(${CURL} -s -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${ACCOUNT}/lab0-c")

  IS_FORK=$(echo "$RESPONSE" | sed -n 's/.*"fork": \(true\|false\).*/\1/p' | head -n1)
  PARENT_NAME=$(echo "$RESPONSE" | awk -F'"' '/"parent": \{/{flag=1} flag && /"full_name":/{print $4; exit}')

  if [[ "$IS_FORK" != "true" || "$PARENT_NAME" != "sysprog21/lab0-c" ]]; then
    throw "Your repository MUST be forked from 'sysprog21/lab0-c'."
  fi
fi

# 4. Check GitHub Actions
((CURRENT_STEP++))
progress "$CURRENT_STEP" "$TOTAL_STEPS"

if [ ${TOTAL_COUNT} -eq "0" ]; then
  printf "\n[!] GitHub Actions MUST be activated."
  case ${OSTYPE} in
    "linux"*)
      xdg-open https://github.com/${ACCOUNT}/lab0-c/actions > /dev/null 2>&1
      ;;
    "darwin"*)
      open https://github.com/${ACCOUNT}/lab0-c/actions
      ;;
    *)
      echo "Please activate at https://github.com/${ACCOUNT}/lab0-c/actions"
      ;;
  esac
  throw "Check this article: https://docs.github.com/en/actions/managing-workflow-runs/disabling-and-enabling-a-workflow\n\
    Then, execute 'make' again."
fi

# 5. Install Git hooks
((CURRENT_STEP++))
progress "$CURRENT_STEP" "$TOTAL_STEPS"

HOOKS_DIR=".git/hooks"
mkdir -p "$HOOKS_DIR" || exit 1

# List of hook names.
HOOKS=(pre-commit commit-msg pre-push prepare-commit-msg)

for hook in "${HOOKS[@]}"; do
  ln -sf "../../scripts/${hook}.hook" "$HOOKS_DIR/$hook" || exit 1
  chmod +x "$HOOKS_DIR/$hook"
done

touch .git/hooks/applied || exit 1

echo
echo "Git hooks are installed successfully."
